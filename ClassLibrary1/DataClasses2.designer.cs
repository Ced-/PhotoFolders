#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18051
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISBusinessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="imageDB")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertISFolder(ISFolder instance);
    partial void UpdateISFolder(ISFolder instance);
    partial void DeleteISFolder(ISFolder instance);
    partial void InsertISFolderToISUser(ISFolderToISUser instance);
    partial void UpdateISFolderToISUser(ISFolderToISUser instance);
    partial void DeleteISFolderToISUser(ISFolderToISUser instance);
    partial void InsertISImage(ISImage instance);
    partial void UpdateISImage(ISImage instance);
    partial void DeleteISImage(ISImage instance);
    partial void InsertISProductType(ISProductType instance);
    partial void UpdateISProductType(ISProductType instance);
    partial void DeleteISProductType(ISProductType instance);
    partial void InsertISProductTypeToISFolder(ISProductTypeToISFolder instance);
    partial void UpdateISProductTypeToISFolder(ISProductTypeToISFolder instance);
    partial void DeleteISProductTypeToISFolder(ISProductTypeToISFolder instance);
    partial void InsertISResolution(ISResolution instance);
    partial void UpdateISResolution(ISResolution instance);
    partial void DeleteISResolution(ISResolution instance);
    partial void InsertISResolutionToISFolder(ISResolutionToISFolder instance);
    partial void UpdateISResolutionToISFolder(ISResolutionToISFolder instance);
    partial void DeleteISResolutionToISFolder(ISResolutionToISFolder instance);
    partial void InsertISUser(ISUser instance);
    partial void UpdateISUser(ISUser instance);
    partial void DeleteISUser(ISUser instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::ISBusinessLayer.Properties.Settings.Default.imageDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ISFolder> ISFolder
		{
			get
			{
				return this.GetTable<ISFolder>();
			}
		}
		
		public System.Data.Linq.Table<ISFolderToISUser> ISFolderToISUser
		{
			get
			{
				return this.GetTable<ISFolderToISUser>();
			}
		}
		
		public System.Data.Linq.Table<ISImage> ISImage
		{
			get
			{
				return this.GetTable<ISImage>();
			}
		}
		
		public System.Data.Linq.Table<ISProductType> ISProductType
		{
			get
			{
				return this.GetTable<ISProductType>();
			}
		}
		
		public System.Data.Linq.Table<ISProductTypeToISFolder> ISProductTypeToISFolder
		{
			get
			{
				return this.GetTable<ISProductTypeToISFolder>();
			}
		}
		
		public System.Data.Linq.Table<ISResolution> ISResolution
		{
			get
			{
				return this.GetTable<ISResolution>();
			}
		}
		
		public System.Data.Linq.Table<ISResolutionToISFolder> ISResolutionToISFolder
		{
			get
			{
				return this.GetTable<ISResolutionToISFolder>();
			}
		}
		
		public System.Data.Linq.Table<ISUser> ISUser
		{
			get
			{
				return this.GetTable<ISUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISFolder")]
	public partial class ISFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Foldername;
		
		private int _FolderType;
		
		private EntitySet<ISResolutionToISFolder> _ISResolutionToISFolder;
		
		private EntitySet<ISImage> _ISImage;
		
		private EntitySet<ISProductTypeToISFolder> _ISProductTypeToISFolder;
		
		private EntityRef<ISFolderToISUser> _ISFolderToISUser;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFoldernameChanging(string value);
    partial void OnFoldernameChanged();
    partial void OnFolderTypeChanging(int value);
    partial void OnFolderTypeChanged();
    #endregion
		
		public ISFolder()
		{
			this._ISResolutionToISFolder = new EntitySet<ISResolutionToISFolder>(new Action<ISResolutionToISFolder>(this.attach_ISResolutionToISFolder), new Action<ISResolutionToISFolder>(this.detach_ISResolutionToISFolder));
			this._ISImage = new EntitySet<ISImage>(new Action<ISImage>(this.attach_ISImage), new Action<ISImage>(this.detach_ISImage));
			this._ISProductTypeToISFolder = new EntitySet<ISProductTypeToISFolder>(new Action<ISProductTypeToISFolder>(this.attach_ISProductTypeToISFolder), new Action<ISProductTypeToISFolder>(this.detach_ISProductTypeToISFolder));
			this._ISFolderToISUser = default(EntityRef<ISFolderToISUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ISFolderToISUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foldername", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Foldername
		{
			get
			{
				return this._Foldername;
			}
			set
			{
				if ((this._Foldername != value))
				{
					this.OnFoldernameChanging(value);
					this.SendPropertyChanging();
					this._Foldername = value;
					this.SendPropertyChanged("Foldername");
					this.OnFoldernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderType", DbType="Int NOT NULL")]
		public int FolderType
		{
			get
			{
				return this._FolderType;
			}
			set
			{
				if ((this._FolderType != value))
				{
					this.OnFolderTypeChanging(value);
					this.SendPropertyChanging();
					this._FolderType = value;
					this.SendPropertyChanged("FolderType");
					this.OnFolderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISResolutionToISFolder", Storage="_ISResolutionToISFolder", ThisKey="ID", OtherKey="ISFolderID")]
		public EntitySet<ISResolutionToISFolder> ISResolutionToISFolder
		{
			get
			{
				return this._ISResolutionToISFolder;
			}
			set
			{
				this._ISResolutionToISFolder.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISImage", Storage="_ISImage", ThisKey="ID", OtherKey="ISFolderID")]
		public EntitySet<ISImage> ISImage
		{
			get
			{
				return this._ISImage;
			}
			set
			{
				this._ISImage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISProductTypeToISFolder", Storage="_ISProductTypeToISFolder", ThisKey="ID", OtherKey="ISFolderID")]
		public EntitySet<ISProductTypeToISFolder> ISProductTypeToISFolder
		{
			get
			{
				return this._ISProductTypeToISFolder;
			}
			set
			{
				this._ISProductTypeToISFolder.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolderToISUser_ISFolder", Storage="_ISFolderToISUser", ThisKey="ID", OtherKey="ISFolderID", IsForeignKey=true)]
		public ISFolderToISUser ISFolderToISUser
		{
			get
			{
				return this._ISFolderToISUser.Entity;
			}
			set
			{
				ISFolderToISUser previousValue = this._ISFolderToISUser.Entity;
				if (((previousValue != value) 
							|| (this._ISFolderToISUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISFolderToISUser.Entity = null;
						previousValue.ISFolder.Remove(this);
					}
					this._ISFolderToISUser.Entity = value;
					if ((value != null))
					{
						value.ISFolder.Add(this);
						this._ID = value.ISFolderID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("ISFolderToISUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISResolutionToISFolder(ISResolutionToISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = this;
		}
		
		private void detach_ISResolutionToISFolder(ISResolutionToISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = null;
		}
		
		private void attach_ISImage(ISImage entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = this;
		}
		
		private void detach_ISImage(ISImage entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = null;
		}
		
		private void attach_ISProductTypeToISFolder(ISProductTypeToISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = this;
		}
		
		private void detach_ISProductTypeToISFolder(ISProductTypeToISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISFolderToISUser")]
	public partial class ISFolderToISUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _connectGUID;
		
		private System.Guid _ISUserID;
		
		private System.Guid _ISFolderID;
		
		private EntitySet<ISFolder> _ISFolder;
		
		private EntityRef<ISUser> _ISUser;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnconnectGUIDChanging(System.Guid value);
    partial void OnconnectGUIDChanged();
    partial void OnISUserIDChanging(System.Guid value);
    partial void OnISUserIDChanged();
    partial void OnISFolderIDChanging(System.Guid value);
    partial void OnISFolderIDChanged();
    #endregion
		
		public ISFolderToISUser()
		{
			this._ISFolder = new EntitySet<ISFolder>(new Action<ISFolder>(this.attach_ISFolder), new Action<ISFolder>(this.detach_ISFolder));
			this._ISUser = default(EntityRef<ISUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connectGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid connectGUID
		{
			get
			{
				return this._connectGUID;
			}
			set
			{
				if ((this._connectGUID != value))
				{
					this.OnconnectGUIDChanging(value);
					this.SendPropertyChanging();
					this._connectGUID = value;
					this.SendPropertyChanged("connectGUID");
					this.OnconnectGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISUserID
		{
			get
			{
				return this._ISUserID;
			}
			set
			{
				if ((this._ISUserID != value))
				{
					if (this._ISUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISUserIDChanging(value);
					this.SendPropertyChanging();
					this._ISUserID = value;
					this.SendPropertyChanged("ISUserID");
					this.OnISUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISFolderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISFolderID
		{
			get
			{
				return this._ISFolderID;
			}
			set
			{
				if ((this._ISFolderID != value))
				{
					this.OnISFolderIDChanging(value);
					this.SendPropertyChanging();
					this._ISFolderID = value;
					this.SendPropertyChanged("ISFolderID");
					this.OnISFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolderToISUser_ISFolder", Storage="_ISFolder", ThisKey="ISFolderID", OtherKey="ID")]
		public EntitySet<ISFolder> ISFolder
		{
			get
			{
				return this._ISFolder;
			}
			set
			{
				this._ISFolder.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISUser_ISFolderToISUser", Storage="_ISUser", ThisKey="ISUserID", OtherKey="ID", IsForeignKey=true)]
		public ISUser ISUser
		{
			get
			{
				return this._ISUser.Entity;
			}
			set
			{
				ISUser previousValue = this._ISUser.Entity;
				if (((previousValue != value) 
							|| (this._ISUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISUser.Entity = null;
						previousValue.ISFolderToISUser.Remove(this);
					}
					this._ISUser.Entity = value;
					if ((value != null))
					{
						value.ISFolderToISUser.Add(this);
						this._ISUserID = value.ID;
					}
					else
					{
						this._ISUserID = default(System.Guid);
					}
					this.SendPropertyChanged("ISUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISFolder(ISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolderToISUser = this;
		}
		
		private void detach_ISFolder(ISFolder entity)
		{
			this.SendPropertyChanging();
			entity.ISFolderToISUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISImage")]
	public partial class ISImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _ISFolderID;
		
		private EntityRef<ISFolder> _ISFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnISFolderIDChanging(System.Guid value);
    partial void OnISFolderIDChanged();
    #endregion
		
		public ISImage()
		{
			this._ISFolder = default(EntityRef<ISFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISFolderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISFolderID
		{
			get
			{
				return this._ISFolderID;
			}
			set
			{
				if ((this._ISFolderID != value))
				{
					if (this._ISFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISFolderIDChanging(value);
					this.SendPropertyChanging();
					this._ISFolderID = value;
					this.SendPropertyChanged("ISFolderID");
					this.OnISFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISImage", Storage="_ISFolder", ThisKey="ISFolderID", OtherKey="ID", IsForeignKey=true)]
		public ISFolder ISFolder
		{
			get
			{
				return this._ISFolder.Entity;
			}
			set
			{
				ISFolder previousValue = this._ISFolder.Entity;
				if (((previousValue != value) 
							|| (this._ISFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISFolder.Entity = null;
						previousValue.ISImage.Remove(this);
					}
					this._ISFolder.Entity = value;
					if ((value != null))
					{
						value.ISImage.Add(this);
						this._ISFolderID = value.ID;
					}
					else
					{
						this._ISFolderID = default(System.Guid);
					}
					this.SendPropertyChanged("ISFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISProductType")]
	public partial class ISProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Price;
		
		private EntityRef<ISProductTypeToISFolder> _ISProductTypeToISFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public ISProductType()
		{
			this._ISProductTypeToISFolder = default(EntityRef<ISProductTypeToISFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ISProductTypeToISFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISProductTypeToISFolder_ISProductType", Storage="_ISProductTypeToISFolder", ThisKey="ID", OtherKey="ISProductTypeID", IsForeignKey=true)]
		public ISProductTypeToISFolder ISProductTypeToISFolder
		{
			get
			{
				return this._ISProductTypeToISFolder.Entity;
			}
			set
			{
				ISProductTypeToISFolder previousValue = this._ISProductTypeToISFolder.Entity;
				if (((previousValue != value) 
							|| (this._ISProductTypeToISFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISProductTypeToISFolder.Entity = null;
						previousValue.ISProductType.Remove(this);
					}
					this._ISProductTypeToISFolder.Entity = value;
					if ((value != null))
					{
						value.ISProductType.Add(this);
						this._ID = value.ISProductTypeID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("ISProductTypeToISFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISProductTypeToISFolder")]
	public partial class ISProductTypeToISFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _connectGUID;
		
		private System.Guid _ISProductTypeID;
		
		private System.Guid _ISFolderID;
		
		private EntitySet<ISProductType> _ISProductType;
		
		private EntityRef<ISFolder> _ISFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnconnectGUIDChanging(System.Guid value);
    partial void OnconnectGUIDChanged();
    partial void OnISProductTypeIDChanging(System.Guid value);
    partial void OnISProductTypeIDChanged();
    partial void OnISFolderIDChanging(System.Guid value);
    partial void OnISFolderIDChanged();
    #endregion
		
		public ISProductTypeToISFolder()
		{
			this._ISProductType = new EntitySet<ISProductType>(new Action<ISProductType>(this.attach_ISProductType), new Action<ISProductType>(this.detach_ISProductType));
			this._ISFolder = default(EntityRef<ISFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connectGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid connectGUID
		{
			get
			{
				return this._connectGUID;
			}
			set
			{
				if ((this._connectGUID != value))
				{
					this.OnconnectGUIDChanging(value);
					this.SendPropertyChanging();
					this._connectGUID = value;
					this.SendPropertyChanged("connectGUID");
					this.OnconnectGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISProductTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISProductTypeID
		{
			get
			{
				return this._ISProductTypeID;
			}
			set
			{
				if ((this._ISProductTypeID != value))
				{
					this.OnISProductTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ISProductTypeID = value;
					this.SendPropertyChanged("ISProductTypeID");
					this.OnISProductTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISFolderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISFolderID
		{
			get
			{
				return this._ISFolderID;
			}
			set
			{
				if ((this._ISFolderID != value))
				{
					if (this._ISFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISFolderIDChanging(value);
					this.SendPropertyChanging();
					this._ISFolderID = value;
					this.SendPropertyChanged("ISFolderID");
					this.OnISFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISProductTypeToISFolder_ISProductType", Storage="_ISProductType", ThisKey="ISProductTypeID", OtherKey="ID")]
		public EntitySet<ISProductType> ISProductType
		{
			get
			{
				return this._ISProductType;
			}
			set
			{
				this._ISProductType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISProductTypeToISFolder", Storage="_ISFolder", ThisKey="ISFolderID", OtherKey="ID", IsForeignKey=true)]
		public ISFolder ISFolder
		{
			get
			{
				return this._ISFolder.Entity;
			}
			set
			{
				ISFolder previousValue = this._ISFolder.Entity;
				if (((previousValue != value) 
							|| (this._ISFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISFolder.Entity = null;
						previousValue.ISProductTypeToISFolder.Remove(this);
					}
					this._ISFolder.Entity = value;
					if ((value != null))
					{
						value.ISProductTypeToISFolder.Add(this);
						this._ISFolderID = value.ID;
					}
					else
					{
						this._ISFolderID = default(System.Guid);
					}
					this.SendPropertyChanged("ISFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISProductType(ISProductType entity)
		{
			this.SendPropertyChanging();
			entity.ISProductTypeToISFolder = this;
		}
		
		private void detach_ISProductType(ISProductType entity)
		{
			this.SendPropertyChanging();
			entity.ISProductTypeToISFolder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISResolution")]
	public partial class ISResolution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _Width;
		
		private int _Height;
		
		private EntityRef<ISResolutionToISFolder> _ISResolutionToISFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    #endregion
		
		public ISResolution()
		{
			this._ISResolutionToISFolder = default(EntityRef<ISResolutionToISFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ISResolutionToISFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISResolutionToISFolder_ISResolution", Storage="_ISResolutionToISFolder", ThisKey="ID", OtherKey="ISResolutionID", IsForeignKey=true)]
		public ISResolutionToISFolder ISResolutionToISFolder
		{
			get
			{
				return this._ISResolutionToISFolder.Entity;
			}
			set
			{
				ISResolutionToISFolder previousValue = this._ISResolutionToISFolder.Entity;
				if (((previousValue != value) 
							|| (this._ISResolutionToISFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISResolutionToISFolder.Entity = null;
						previousValue.ISResolution.Remove(this);
					}
					this._ISResolutionToISFolder.Entity = value;
					if ((value != null))
					{
						value.ISResolution.Add(this);
						this._ID = value.ISResolutionID;
					}
					else
					{
						this._ID = default(System.Guid);
					}
					this.SendPropertyChanged("ISResolutionToISFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISResolutionToISFolder")]
	public partial class ISResolutionToISFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _connectGUID;
		
		private System.Guid _ISResolutionID;
		
		private System.Guid _ISFolderID;
		
		private EntitySet<ISResolution> _ISResolution;
		
		private EntityRef<ISFolder> _ISFolder;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnconnectGUIDChanging(System.Guid value);
    partial void OnconnectGUIDChanged();
    partial void OnISResolutionIDChanging(System.Guid value);
    partial void OnISResolutionIDChanged();
    partial void OnISFolderIDChanging(System.Guid value);
    partial void OnISFolderIDChanged();
    #endregion
		
		public ISResolutionToISFolder()
		{
			this._ISResolution = new EntitySet<ISResolution>(new Action<ISResolution>(this.attach_ISResolution), new Action<ISResolution>(this.detach_ISResolution));
			this._ISFolder = default(EntityRef<ISFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connectGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid connectGUID
		{
			get
			{
				return this._connectGUID;
			}
			set
			{
				if ((this._connectGUID != value))
				{
					this.OnconnectGUIDChanging(value);
					this.SendPropertyChanging();
					this._connectGUID = value;
					this.SendPropertyChanged("connectGUID");
					this.OnconnectGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISResolutionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISResolutionID
		{
			get
			{
				return this._ISResolutionID;
			}
			set
			{
				if ((this._ISResolutionID != value))
				{
					this.OnISResolutionIDChanging(value);
					this.SendPropertyChanging();
					this._ISResolutionID = value;
					this.SendPropertyChanged("ISResolutionID");
					this.OnISResolutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISFolderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ISFolderID
		{
			get
			{
				return this._ISFolderID;
			}
			set
			{
				if ((this._ISFolderID != value))
				{
					if (this._ISFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISFolderIDChanging(value);
					this.SendPropertyChanging();
					this._ISFolderID = value;
					this.SendPropertyChanged("ISFolderID");
					this.OnISFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISResolutionToISFolder_ISResolution", Storage="_ISResolution", ThisKey="ISResolutionID", OtherKey="ID")]
		public EntitySet<ISResolution> ISResolution
		{
			get
			{
				return this._ISResolution;
			}
			set
			{
				this._ISResolution.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISFolder_ISResolutionToISFolder", Storage="_ISFolder", ThisKey="ISFolderID", OtherKey="ID", IsForeignKey=true)]
		public ISFolder ISFolder
		{
			get
			{
				return this._ISFolder.Entity;
			}
			set
			{
				ISFolder previousValue = this._ISFolder.Entity;
				if (((previousValue != value) 
							|| (this._ISFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISFolder.Entity = null;
						previousValue.ISResolutionToISFolder.Remove(this);
					}
					this._ISFolder.Entity = value;
					if ((value != null))
					{
						value.ISResolutionToISFolder.Add(this);
						this._ISFolderID = value.ID;
					}
					else
					{
						this._ISFolderID = default(System.Guid);
					}
					this.SendPropertyChanged("ISFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISResolution(ISResolution entity)
		{
			this.SendPropertyChanging();
			entity.ISResolutionToISFolder = this;
		}
		
		private void detach_ISResolution(ISResolution entity)
		{
			this.SendPropertyChanging();
			entity.ISResolutionToISFolder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISUser")]
	public partial class ISUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Email;
		
		private int _PermissionLevel;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private EntitySet<ISFolderToISUser> _ISFolderToISUser;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPermissionLevelChanging(int value);
    partial void OnPermissionLevelChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    #endregion
		
		public ISUser()
		{
			this._ISFolderToISUser = new EntitySet<ISFolderToISUser>(new Action<ISFolderToISUser>(this.attach_ISFolderToISUser), new Action<ISFolderToISUser>(this.detach_ISFolderToISUser));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionLevel", DbType="Int NOT NULL")]
		public int PermissionLevel
		{
			get
			{
				return this._PermissionLevel;
			}
			set
			{
				if ((this._PermissionLevel != value))
				{
					this.OnPermissionLevelChanging(value);
					this.SendPropertyChanging();
					this._PermissionLevel = value;
					this.SendPropertyChanged("PermissionLevel");
					this.OnPermissionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISUser_ISFolderToISUser", Storage="_ISFolderToISUser", ThisKey="ID", OtherKey="ISUserID")]
		public EntitySet<ISFolderToISUser> ISFolderToISUser
		{
			get
			{
				return this._ISFolderToISUser;
			}
			set
			{
				this._ISFolderToISUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ISFolderToISUser(ISFolderToISUser entity)
		{
			this.SendPropertyChanging();
			entity.ISUser = this;
		}
		
		private void detach_ISFolderToISUser(ISFolderToISUser entity)
		{
			this.SendPropertyChanging();
			entity.ISUser = null;
		}
	}
}
#pragma warning restore 1591
